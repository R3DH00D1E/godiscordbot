name: Deploy goDiscordBot

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build the bot
        run: |
          go mod tidy
          go build -o godiscordbot main.go

      - name: Substitute placeholders in godiscordbot.service
        run: |
          # Проверяем, существует ли файл
          if [ ! -f systemd/godiscordbot.service ]; then
            echo "Error: systemd/godiscordbot.service not found."
            exit 1
          fi

          # Получаем имя пользователя из переменной GitHub
          CURRENT_USER="${{ secrets.USER }}"
          # Получаем путь к домашней директории пользователя
          HOME_DIR="/home/$CURRENT_USER"
          
          # Заменяем плейсхолдеры для пользователя и путей
          sed -e "s|User=youruser|User=$CURRENT_USER|g" \
              -e "s|WorkingDirectory=/home/youruser/godiscordbot|WorkingDirectory=$HOME_DIR/godiscordbot|g" \
              -e "s|ExecStart=/home/youruser/godiscordbot/godiscordbot|ExecStart=$HOME_DIR/godiscordbot/godiscordbot|g" \
              -e "s|Environment=\"CONFIG_PATH=/home/youruser/godiscordbot/config.json\"|Environment=\"CONFIG_PATH=$HOME_DIR/godiscordbot/config.json\" Environment=\"ds_token=${{ secrets.ds_token }}\"|g" \
              systemd/godiscordbot.service > systemd/godiscordbot.service.tmp

          # Перемещаем временный файл обратно
          mv systemd/godiscordbot.service.tmp systemd/godiscordbot.service
      
      - name: Create or update config file
        run: |
          # Создаем директорию для конфигов, если она еще не существует
          # Создаем или перезаписываем конфиг файл
          cat > config.json << EOF
          {
            "ds_token": "${{ secrets.ds_token }}"
          }
          EOF
          
          echo "Config file updated with GitHub variables"

      - name: Create directory for bot
        run: |
          # Получаем имя пользователя из переменной GitHub
          CURRENT_USER="${{ secrets.USER }}"
          # Получаем путь к домашней директории пользователя
          HOME_DIR="/home/$CURRENT_USER"
          
          # Создаем директорию для бота в домашней папке
          mkdir -p $HOME_DIR/godiscordbot/
          sudo chown -R $CURRENT_USER:$CURRENT_USER $HOME_DIR/godiscordbot

      - name: Stop existing services and processes
        run: |
          # Останавливаем существующие службы
          sudo systemctl stop godiscordbot.service || true
          
          # Получаем имя пользователя из переменной GitHub
          CURRENT_USER="${{ secrets.USER }}"
          # Определяем путь к исполняемому файлу
          HOME_DIR="/home/$CURRENT_USER"
          BOT_PATH="$HOME_DIR/godiscordbot/godiscordbot"
          
          # Принудительно завершаем любые оставшиеся процессы
          echo "Searching for processes to kill..."
          if pgrep -f "$BOT_PATH"; then
            echo "Process is still running, killing with SIGKILL"
            sudo pkill -9 -f "$BOT_PATH" || true
            sleep 3
          fi

          # Проверяем еще раз и показываем список
          if pgrep -f "$BOT_PATH"; then
            echo "WARNING: Process still running! Details:"
            sudo ps aux | grep godiscordbot
            # Убиваем все процессы принудительно по имени файла
            sudo fuser -k "$BOT_PATH" 2>/dev/null || true
            sleep 2
          fi

      - name: Copy executable and service file
        run: |
          # Получаем имя пользователя из переменной GitHub
          CURRENT_USER="${{ secrets.USER }}"
          # Получаем путь к домашней директории пользователя
          HOME_DIR="/home/$CURRENT_USER"
          BOT_DIR="$HOME_DIR/godiscordbot"
          
          # Копируем исполняемый файл с временным именем
          cp godiscordbot $BOT_DIR/godiscordbot.new
          chmod +x $BOT_DIR/godiscordbot.new
          
          # Атомарное перемещение файла
          mv -f $BOT_DIR/godiscordbot.new $BOT_DIR/godiscordbot

          # Копируем файл службы
          sudo cp systemd/godiscordbot.service /etc/systemd/system/
          
          # Копируем конфигурационный файл
          mkdir -p $BOT_DIR/config
          cp config/config.json $BOT_DIR/config/
          sudo chown -R $CURRENT_USER:$CURRENT_USER $BOT_DIR

      - name: Configure systemd
        run: |
          # Обновляем конфигурацию systemd
          sudo systemctl daemon-reload

          # Включаем и запускаем службу
          sudo systemctl enable godiscordbot.service
          sudo systemctl restart godiscordbot.service
          
          # Показываем статус для проверки
          sudo systemctl status godiscordbot.service --no-pager
